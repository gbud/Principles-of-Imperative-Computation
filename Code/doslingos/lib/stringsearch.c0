/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2022                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
/* Linear and binary search for strings
 *
 * 15-122 Principles of Imperative Computation */

#use <string>
#use "string_arrayutil.c0"
// The above line lets us use functions from string_arrayutil.c0 even
// if we don't include string_arrayutil.c0 on the command line. It
// can sometimes cause problems with the autograder if you do this in
// your code, but it can also be a useful way of splitting your code
// into multiple files.


/************************************************************************/
/************************* BEGIN IMPLEMENTATION *************************/

// a linear search
int linsearch(string x, string[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires string_is_sorted(A, 0, n);
/*@ensures (-1 == \result && !string_is_in(x, A, 0, n))
        || ((0 <= \result && \result < n)
            && string_equal(A[\result], x)); @*/
{
  for (int i = 0; i < n; i++)
    //@loop_invariant 0 <= i && i <= n;
    //@loop_invariant string_gt_seg(x, A, 0, i);
    {
      int cmp = string_compare(A[i], x);
      if (cmp == 0) {
        return i;
      } else if (cmp > 0) {
        //@assert string_compare(A[i], x) > 0;
        return -1;
      }
      //@assert string_compare(A[i], x) < 0;
    }
  return -1;
}

/************************** END IMPLEMENTATION **************************/
/************************************************************************/

/************************************************************************/
/******************************* Interface ******************************/

int linsearch(string x, string[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires string_is_sorted(A, 0, n);
/*@ensures (-1 == \result && !string_is_in(x, A, 0, n))
        || ((0 <= \result && \result < n)
            && string_equal(A[\result], x)); @*/ ;
